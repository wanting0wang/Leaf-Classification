}
X1 = c(9.718,6.604,2.254,2.31,3.247,6.242)
X2 = c(4.1,3,39.5,3.9,7.3,0)
X3 = X1*X2
Y = c(-0.09422,-0.06315,-0.10579,-0.08098,-0.03558,-0.09823)
m <- lm(Y~X3+X1)
for (i in 1:6){
print(m$coefficients[1]+m$coefficients[2]*X1[i]+m$coefficients[3]*X1[i]*X2[i]-Y[i])
}
X1 = c(9.718,6.604,2.254,2.31,3.247,6.242)
X2 = c(4.1,3,39.5,3.9,7.3,0)
X3 = X1*X2
Y = c(-0.09422,-0.06315,-0.10579,-0.08098,-0.03558,-0.09823)
m <- lm(Y~X1:X2+X1)
for (i in 1:6){
print(m$coefficients[1]+m$coefficients[2]*X1[i]+m$coefficients[3]*X1[i]*X2[i]-Y[i])
}
X1 = c(9.718,6.604,2.254,2.31,3.247,6.242)
X2 = c(4.1,3,39.5,3.9,7.3,0)
X3 = X1*X2
Y = c(-0.09422,-0.06315,-0.10579,-0.08098,-0.03558,-0.09823)
m <- lm(Y~X3+X1)
for (i in 1:6){
print(m$coefficients[1]+m$coefficients[2]*X1[i]+m$coefficients[3]*X1[i]*X2[i]-Y[i])
}
X1 = c(9.718,6.604,2.254,2.31,3.247,6.242)
X2 = c(4.1,3,39.5,3.9,7.3,0)
X3 = X1*X2
Y = c(-0.09422,-0.06315,-0.10579,-0.08098,-0.03558,-0.09823)
m <- lm(Y~X1:X2+X1)
for (i in 1:6){
print(m$coefficients[1]+m$coefficients[2]*X1[i]+m$coefficients[3]*X1[i]*X2[i]-Y[i])
}
m$coefficients
summary(m)
unzip()
1.03+124.3+169.36+51.76+16.5+35.79+327.69+1.1+13.2+290.4+126.66+0.42+11+990+330+330+297+534.6+69.3+180.96+25.3+55
1.03+124.3+169.36+51.76+16.5+35.79+327.69+1.1+13.2+290.4+126.66+0.42+11+990+330+330+297+534.6+69.3+180.96+25.3+55+255.57+792+6.6+40.7+0.82+6.6+9.9+44+851.9+8.8
1.03+124.3+169.36+51.76+16.5+35.79+327.69+1.1+13.2+290.4+126.66+0.42+11+990+330+330+297+534.6+69.3+180.96+25.3+55+255.57+792+6.6+40.7+0.82+6.6+9.9+44+851.9+8.8+6.6+550+5.5+466.4+2747.14+11+0.42+9.9+9.7+170.1+164.38+106.7+58.13+6.6
1.03+124.3+169.36+51.76+16.5+35.79+327.69+1.1+13.2+290.4+126.66+0.42+11+990+330+330+297+534.6+69.3+180.96+25.3+55+255.57+792+6.6+40.7+0.82+6.6+9.9+44+851.9+8.8+6.6+550+5.5+466.4+2747.14+11+0.42+9.9+9.7+170.1+164.38+106.7+58.13+6.6+435.42
1.03+124.3+169.38+51.76+16.5+35.79+372.69+1.1+13.2+290.4+126.66+0.42+11+990+330+330+297+534.6+69.3+180.96+25.3+55+255.57+792+6.6+40.7+0.82+6.6+9.9+44+851.9+8.8+6.6+550+5.5+466.4+2747.14+11+0.42+9.9+9.7+170.1+164.38+106.7+58.13+6.6+435.42
1.03+124.3+169.36+51.76+16.5+35.79+327.69+1.1+13.2+290.4+126.66+0.42+11+990+330+330+297+534.6+69.3+180.96+25.3+55+255.57+792+6.6+40.7+0.82+6.6+9.9+44+851.9+8.8+6.6+550+5.5+466.4+2747.14+11+0.42+9.9+9.7+170.1+164.38+106.7+58.13+6.6+435.42
1.03+124.3+169.38+51.76+16.5+35.79+327.69+1.1+13.2+290.4+126.66+0.42+11+990+330+330+297+534.6+69.3+180.96+25.3+55+255.57+792+6.6+40.7+0.82+6.6+9.9+44+851.9+8.8+6.6+550+5.5+466.4+2747.14+11+0.42+9.9+9.7+170.1+164.38+106.7+58.13+6.6+435.42
1.03+124.3+169.38+51.76+16.5+35.79+372.69+1.1+13.2+290.4+126.66+0.42+11+990+330+330+297+534.6+69.3+180.96+25.3+55+255.57+792+6.6+40.7+0.82+6.6+9.9+44+851.9+8.8+6.6+550+5.5+466.4+2747.14+11+0.42+9.9+9.7+170.1+164.38+106.7+58.13+6.6+435.42
library("cwhmisc")
library("stringr")
rm(list = ls())#清除所有变量
dm<-read.csv("E:/d/Demographics.csv",header=T,fill=T)
####拼写FFI item编号####
item_id<-rep(NA,60)
for (i in 1:60){
item_id[i]=str_pad(i,2,side="left",pad="0")
item_id[i]<-paste("I",item_id[i],sep="")
}
####命名列名####
colnames(dm)<-c("ID","year","month","gender","state","u_or_r","F_edu","M_edu",item_id,"favo_G","favo_P","age_diff","younger","older","responsiblility","O","C","E","A","N")
####合并理想对象年龄####
for (i in 1:length(dm$ID)){
switch(dm$age_diff[i],
"1" ={
dm$age_diff[i]=0 - dm$younger[i]
},
"2" ={
dm$age_diff[i]=0
},
"3" ={
dm$age_diff[i]=0 + dm$older[i]
})
}
dm<-dm[,-c(72:73)] #删掉younger和older
dm<-dm[-c(23,48,52),] #删掉没有txt的F024, F010, F018
####读入数据&反随机重排序####
data<-matrix(data=NA, nrow=113,ncol=28)
k=0
for (i in c(1,3:23,25:46,48:57,59:109)){
id=str_pad(i,3,side="left",pad="0")
fn<-paste("E:/d/F", id, ".txt",sep="")
k=k+1
data[k,]<-t(read.table(fn))
data[k,1]<-paste(data[k,2],data[k,1],sep="") #把ID从003变成F003
data[k,21:28]<-as.numeric(data[k,21:28])+1
###整理Q3 反随机排序###
d=as.numeric(data[k,25:28])
Q3=as.numeric(data[k,17:20])
Q3_=rep(NA,4)
for (j in 1:4){
Q3_[d[j]]=Q3[j]
}
data[k,17:20]<-Q3_[1:4]
###Q3结束###
###整理Q2 反随机排序###
d=as.numeric(data[k,21:24])
Q2=as.numeric(data[k,8:16])
Q2_=rep(NA,9)
for (j in 1:9){
Q2_[j]<-d[Q2[j]]
}
data[k,8:16]<-Q2_[1:9]
###Q2结束###
}
for (i in c(2,4,6,8,12,14,16,18)){
k=k+1
id=str_pad(i,3,side="left",pad="0")
fn<-paste("E:/d/Psycho Experiment/E2/F", id, ".txt",sep="")
data[k,]<-t(read.table(fn))
data[k,1]<-paste(data[k,2],data[k,1],sep="") #把ID从003变成F003
data[k,21:28]<-as.numeric(data[k,21:28])+1
###整理Q3 反随机排序###
d=as.numeric(data[k,25:28])
Q3=as.numeric(data[k,17:20])
Q3_=rep(NA,4)
for (j in 1:4){
Q3_[d[j]]=Q3[j]
}
data[k,17:20]<-Q3_[1:4]
###Q3结束###
###整理Q2 反随机排序###
d=as.numeric(data[k,21:24])
Q2=as.numeric(data[k,8:16])
Q2_=rep(NA,9)
for (j in 1:9){
Q2_[j]<-d[Q2[j]]
}
data[k,8:16]<-Q2_[1:9]
###Q2结束###
}
data<-data[-113,] #018合成照片的时候没有修改template 合出来吓死个人
####读入分组信息####
R<-rep(NA,112)
tem<-t(read.table("E:/d/Psycho Experiment/Random.txt"))
R[1:105]<-tem[c(1,3:23,25:46,48:57,59:109)]
R[106:112]<-tem[c(2,4,6,8,12,14,16)]
R<-as.factor(R)
####分类排序item####
tem<-data[,8:16] #把positive的都堆在前面 negative的都堆在后面
data[,10]<-tem[,4]
data[,11]<-tem[,6]
data[,12]<-tem[,9]
data[,13]<-tem[,3]
data[,14]<-tem[,5]
data[,15]<-tem[,7]
data[,16]<-tem[,8]
####删除失败的数据####
#从F001到F059 奶奶组全扔
#去掉2, 24, 47, 58四个missing data 对于R来说是1:55
omit<-0
for (i in c(1:55,106:112)){
if (R[i]==1){
omit<-c(omit,i)
}
}
omit<-omit[-1] #删掉一开始放进去的0
data<-data[-omit,]
R<-R[-omit]
summary(R)
####purify data 1st time####
#去除随机排序信息 并入分组信息
data_all<-cbind(data[,-c(21:28)],R)
#拼写Q1 Q2 Q3 item编号
imag_id<-rep(NA,5)
for (i in 1:length(imag_id)){
imag_id[i]<-paste("imag",i,sep="")}
allocation_id<-rep(NA,9)
for (i in 1:length(allocation_id)){
allocation_id[i]<-paste("allocation",i,sep="")}
beauty_id<-rep(NA,4)
for (i in 1:length(beauty_id)){
beauty_id[i]<-paste("beauty",i,sep="")}
####命名data_all列名####
colnames(data_all)<-c("ID","gender",imag_id,allocation_id,beauty_id,"group")
####计算分数####
#想象力
imag<-rep(NA,length(data_all[,1]))
for (i in 1:length(data_all[,1])){
imag[i]<-sum(as.numeric(data_all[i,3:7]))
}
#note:去掉了第一题 以使正面和负面item平衡
score<-matrix(0,nrow=nrow(data_all),ncol=4) # aver_d, self_d, aver_s, self_s
score.2d<-matrix(0,nrow=nrow(data_all),ncol=2) # aver_self, s_d
score.p<-matrix(0,nrow=nrow(data_all),ncol=4)
score.n<-matrix(0,nrow=nrow(data_all),ncol=4)
score.chi<-matrix(0,nrow=2*9,ncol=6)
score.chi[,5]<-rep(1:2,9)
score.chi[,6]<-rep(1:9,each=2)
View(data)
View(data_all)
sample(1,6,replace=T)
sample(c(1,6),6,replace=T)
sample(c(1:6),6,replace=T)
sample(c(1:6),3,replace=T)
sample(c(1:6),3,replace=T)
sample(c(1:6),3,replace=T)
sample(c(1:6),3,replace=T)
sample(c(1:6),3,replace=T)
sample(c(1:6),3,replace=T)
print(42)
x_min<-51
x_max<-149
for (i in x_min:x_max){
if (i%%2==0){
print(i)
}
}
symbol <- c("MMM","AXP","AAPL","BA","CAT",
"CVX","CSCO","KO","DD","XOM",
"GE","GS","HD","IBM","INTC",
"JNJ","JPM","MCD","MRK","MSFT",
"NKE","PFE","PG","TRV","UNH",
"UTX","VZ","V","WMT","DIS")
for (i in 1:length(symbol)){
URL <- paste("http://ichart.finance.yahoo.com/table.csv?s=",symbol[i],"&a=00&b=1&c=2010&d=00&e=1&f=2011&g=d&ignore=.csv",sep = "")
if (i==1){
data<-read.csv(URL)[,5]
} else{
data<-cbind(data,read.csv(URL)[,5])
}
}
# U <- svd(cov(data))$u
# P <- data%*%U
# sum(diag(cov(P)))#
# plot(diag(cov(P)),type='b')
pc.y <- princomp(data,cor = FALSE)
plot(pc.y)
abline(h=1,lty=2)
biplot(pc.y)
pc.y <- princomp(data,cor = TRUE)
plot(pc.y)
abline(h=1,lty=2)
biplot(pc.y)
pc.y <- princomp(data,cor = FALSE)
biplot(pc.y)
pc.y <- princomp(data,cor = FALSE)
summary(pc.y)
pc.y <- princomp(data,cor = FALSE)
biplot(pc.y)
screeplot(pc.y)
pc.y <- princomp(data,cor = TRUE)
biplot(pc.y)
screeplot(pc.y)
i=1
data<-read.csv(URL)
View(data)
for (i in 1:length(symbol)){
URL <- paste("http://ichart.finance.yahoo.com/table.csv?s=",symbol[i],"&a=00&b=1&c=2010&d=00&e=1&f=2011&g=d&ignore=.csv",sep = "")
tmp<-read.csv(URL)[,c(2,5)]
if (i==1){
data_return<-tmp[,2]-tmp[,1]
} else{
data_return<-cbind(data_return,tmp[,2]-tmp[,2])
}
}
View(data_return)
for (i in 1:length(symbol)){
URL <- paste("http://ichart.finance.yahoo.com/table.csv?s=",symbol[i],"&a=00&b=1&c=2010&d=00&e=1&f=2011&g=d&ignore=.csv",sep = "")
tmp<-read.csv(URL)[,c(2,5)]
if (i==1){
data_return<-tmp[,2]-tmp[,1]
} else{
data_return<-cbind(data_return,tmp[,2]-tmp[,1])
}
}
for (i in 1:length(symbol)){
URL <- paste("http://ichart.finance.yahoo.com/table.csv?s=",symbol[i],"&a=00&b=1&c=2010&d=00&e=1&f=2011&g=d&ignore=.csv",sep = "")
if (i==1){
data<-read.csv(URL)[,5]
} else{
data<-cbind(data,read.csv(URL)[,5])
}
}
View(data_return)
pc.y <- princomp(data,cor = TRUE)
biplot(pc.y)
screeplot(pc.y)
pc.y <- princomp(data_return,cor = TRUE)
biplot(pc.y)
screeplot(pc.y)
summary(pc.y)
sample(1,6)
sample(6,1)
sample(6,2,replace=T)
a<-c(1,2,3)
b<-c(1,2,3)
a/b
for (i in 1:ncol(data)){
n = nrow(data)
if (i==1){
data_return<-(data[2:n,i]-data[1:(n-1),i])/data[1:(n-1),i]
} else{
data_return<-cbind(data_return,(data[2:n,i]-data[1:(n-1),i])/data[1:(n-1),i])
}
}
pc.y <- princomp(data_return,cor = TRUE)
biplot(pc.y)
screeplot(pc.y)
cov(data_return)
d <-read.csv(text=getURL("https://raw.githubusercontent.com/fivethirtyeight/data/master/bechdel/movies.csv"), header=T)
library(RCurl)
d <-read.csv(text=getURL("https://raw.githubusercontent.com/fivethirtyeight/data/master/bechdel/movies.csv"), header=T)
summary(d)
names(d)
vars = c("domgross_2013.", "intgross_2013.", "budget_2013.", "binary")
sub = d[, vars]
sub$domgross_2013. = as.numeric(paste(sub$domgross_2013.))
sub$intgross_2013. = as.numeric(paste(sub$intgross_2013.))
sub$budget_2013. = as.numeric(paste(sub$budget_2013.))
sub$tg13 = rowSums(sub[,c("domgross_2013.", "intgross_2013.")], na.rm=T)
sub$tot.gross.13.mil = sub$tg13/(1000000)
sub$budget.13.mil = sub$budget_2013./(1000000)
lm1 = lm(tot.gross.13.mil ~ as.factor(binary), data=sub)
summary(lm1)
lm2 = lm(tot.gross.13.mil ~ as.factor(binary) + budget.13.mil, data=sub)
summary(lm2)
g = read.csv(file.choose())
g$realrinc1000s = (g$realrinc)/1000
plot(as.factor(g$replaceu), g$realrinc1000s)
plot(g$replaceu, g$realrinc1000s)
cor.test(g$replaceu,g$realrinc1000s)
lm3 = lm(replaceu ~ realrinc1000s , data=g,  subset = !is.na(big5d2) )
summary(lm1)
plot(as.factor(g$big5d2), g$realrinc1000s)
lm4 = lm(replaceu ~ realrinc1000s + big5d2, data=g)
summary(lm2)
lm4 = lm(replaceu ~ realrinc1000s + big5d2, data=g)
summary(lm2)
lm4 = lm(replaceu ~ realrinc1000s + big5d2, data=g)
summary(lm4)
lm3 = lm(replaceu ~ realrinc1000s , data=g,  subset = !is.na(big5d2) )
summary(lm3)
lm4 = lm(replaceu ~ realrinc1000s + big5d2, data=g)
summary(lm4)
install.packages("stargazer")
library(stargazer)
stargazer(lm3, lm4, type = "text")
install.packages("readstatal13")
gss08 =    read.dta13("E:/d/Columbia/QMSS/courseworks/G4015 Data Analysis for the Social Science/Lab/GSS2008.dta", convert.factors = F, generate.factors = FALSE,
encoding = "UTF-8", fromEncoding = NULL, convert.underscore = FALSE,
missing.type = FALSE, convert.dates = TRUE, replace.strl = TRUE, add.rownames = FALSE, nonint.factors = FALSE)
library(readstata13)
install.packages("readstata13")
library(readstata13)
## Go to http://gss.norc.org/get-the-data/stata and download GSS2008 in Stata format and unzip it
gss08 =    read.dta13("E:/d/Columbia/QMSS/courseworks/G4015 Data Analysis for the Social Science/Lab/GSS2008.dta", convert.factors = F, generate.factors = FALSE,
encoding = "UTF-8", fromEncoding = NULL, convert.underscore = FALSE,
missing.type = FALSE, convert.dates = TRUE, replace.strl = TRUE, add.rownames = FALSE, nonint.factors = FALSE)
lm5 = lm(visart ~ visnhist + size, gss08)
summary(lm5)
library(gmodels)
?cros
?CrossTable
?smooth.spline
x<-c(1:20)
y<-((2*pie)^(-1/2))*exp(-1/2*(x^2)))
y<-((2*pie)^(-1/2))*exp(-1/2*(x^2))
library(ISLR)
data(Wage)
install.packages("ISLR")
library(ISLR)
data(Wage)
install.packages("locfit")
library(locfit)
lm<-locfit(wage~age,data=Wage)
summary(lm)
model<-locfit(wage~age,data=Wage)
model.response(age)
model.response(Wage$age)
predict(model,Wage$age)
plot(x=Wage$age,y=Wage$wage,type = "l")
plot(x=Wage$age,y=Wage$wage,type = "p")
model.loc<-locfit(wage~age,data=Wage)
model.lin<-lm(wage~age,data=Wage)
lines(x=x,y=predict(model.lin,Wage$age),col="red")
lines(x=Wage$age,y=predict(model.lin,Wage$age),col="red")
pred.model.loc<-predict(model.loc,Wage$age)
length(pred.model.loc)
length(Wage$age)
pred.model.loc<-predict(model.loc,Wage$age)
pred.model.lin<-predict(model.lin,Wage$age)
model.loc<-locfit(wage~age,data=Wage)
model.lin<-lm(wage~age,data=Wage)
pred.model.loc<-predict(model.loc,Wage$age)
pred.model.lin<-predict(model.lin,Wage$age)
summary(model.lin)
plot(model.lin$residuals)
plot(x=age,y=wage,data=Wage)
plot(x=Wage$age,y=Wage$wage)
lines(x=Wage$age,y=pred.model.loc,col="red")
attach(Wage)
wage<-wage[order(age)]
age<-age[order(age)]
model.loc<-locfit(wage~age,data=Wage)
model.lin<-lm(wage~age,data=Wage)
pred.model.loc<-predict(model.loc,Wage$age)
pred.model.lin<-predict(model.lin,Wage$age)
library(ISLR)
data(Wage)
attach(Wage)
wage<-wage[order(age)]
age<-age[order(age)]
model.loc<-locfit(wage~age)
model.lin<-lm(wage~age)
pred.model.loc<-predict(model.loc,age)
pred.model.lin<-predict(model.lin,age)
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red")
?locfit
model.loc<-locfit(wage~age,deg=1)
pred.model.loc<-predict(model.loc,age)
pred.model.lin<-predict(model.lin,age)
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red")
model.loc<-locfit(wage~age,deg=1,kern="gauss")
pred.model.loc<-predict(model.loc,age)
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red")
model.loc<-locfit(wage~age,deg=3,kern="gauss")
model.lin<-lm(wage~age)
# model.loc<-locfit.raw(wage~age,deg=1)
pred.model.loc<-predict(model.loc,age)
# pred.model.lin<-predict(model.lin,age)
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red")
model.loc<-locfit(wage~age,deg=2,kern="gauss")
model.lin<-lm(wage~age)
# model.loc<-locfit.raw(wage~age,deg=1)
pred.model.loc<-predict(model.loc,age)
# pred.model.lin<-predict(model.lin,age)
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red")
model.loc<-locfit(wage~age,kern="gauss")
model.lin<-lm(wage~age)
# model.loc<-locfit.raw(wage~age,deg=1)
pred.model.loc<-predict(model.loc,age)
# pred.model.lin<-predict(model.lin,age)
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red")
model.loc<-locfit(wage~age,kern="gauss")
model.lin<-lm(wage~age)
# model.loc<-locfit.raw(wage~age,deg=1)
pred.model.loc<-predict(model.loc,age)
# pred.model.lin<-predict(model.lin,age)
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red")
model.loc<-locfit(wage~age,deg=2,kern="gauss")
model.lin<-lm(wage~age)
# model.loc<-locfit.raw(wage~age,deg=1)
pred.model.loc<-predict(model.loc,age)
# pred.model.lin<-predict(model.lin,age)
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red")
model.loc<-locfit(wage~age,deg=1,kern="gauss")
model.lin<-lm(wage~age)
# model.loc<-locfit.raw(wage~age,deg=1)
pred.model.loc<-predict(model.loc,age)
# pred.model.lin<-predict(model.lin,age)
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red")
model.loc<-locfit(wage~age,deg=1)
model.lin<-lm(wage~age)
# model.loc<-locfit.raw(wage~age,deg=1)
pred.model.loc<-predict(model.loc,age)
# pred.model.lin<-predict(model.lin,age)
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red")
model.loc<-locfit(wage~age,deg=1,kern="gauss")
model.lin<-lm(wage~age)
# model.loc<-locfit.raw(wage~age,deg=1)
pred.model.loc<-predict(model.loc,age)
# pred.model.lin<-predict(model.lin,age)
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red")
lines(x=age,y=pred.model.loc,col="red",lty=2)
?lines
plot(x=age,y=wage)
lines(x=age,y=pred.model.loc,col="red",lwd=3)
install.packages('tidyverse')
library(tidyverse)
install.packages("tidyverse")
library(tideverse)
library(devtools)
install_github("hadley/tidyverse")
install.packages("E:/d/tidyverse_1.1.0.zip", repos = NULL, type = "win.binary")
library(tidyverse)
library(readr)
install.packages(c("acepack", "astsa", "BH", "Cairo", "car", "choroplethr", "chron", "class", "cluster", "coda", "codetools", "coin", "colorspace", "crayon", "curl", "data.table", "digest", "EMCluster", "git2r", "gtable", "Hmisc", "irlba", "lattice", "latticeExtra", "leaps", "maptools", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "mnormt", "munsell", "nlme", "NLP", "nnet", "OpenMx", "openNLP", "openssl", "party", "plotrix", "proto", "psych", "quantreg", "R.methodsS3", "R.oo", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "scales", "snow", "sp", "SparseM", "spatial", "spdep", "spgwr", "StanHeaders", "stringi", "syuzhet", "testthat", "tseries", "VGAM", "XML", "yaml", "zoo"))
install.packages(c("acepack", "astsa", "BH", "Cairo", "car", "choroplethr", "chron", "class", "cluster", "coda", "codetools", "coin", "colorspace", "crayon", "curl", "data.table", "digest", "EMCluster", "git2r", "gtable", "Hmisc", "irlba", "lattice", "latticeExtra", "leaps", "maptools", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "mnormt", "munsell", "nlme", "NLP", "nnet", "OpenMx", "openNLP", "openssl", "party", "plotrix", "proto", "psych", "quantreg", "R.methodsS3", "R.oo", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "scales", "snow", "sp", "SparseM", "spatial", "spdep", "spgwr", "StanHeaders", "stringi", "syuzhet", "testthat", "tseries", "VGAM", "XML", "yaml", "zoo"))
install.packages(c("acepack", "astsa", "BH", "Cairo", "car", "choroplethr", "chron", "class", "cluster", "coda", "codetools", "coin", "colorspace", "crayon", "curl", "data.table", "digest", "EMCluster", "git2r", "gtable", "Hmisc", "irlba", "lattice", "latticeExtra", "leaps", "maptools", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "mnormt", "munsell", "nlme", "NLP", "nnet", "OpenMx", "openNLP", "openssl", "party", "plotrix", "proto", "psych", "quantreg", "R.methodsS3", "R.oo", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "scales", "snow", "sp", "SparseM", "spatial", "spdep", "spgwr", "StanHeaders", "stringi", "syuzhet", "testthat", "tseries", "VGAM", "XML", "yaml", "zoo"))
install.packages(c("acepack", "astsa", "BH", "Cairo", "car", "choroplethr", "chron", "class", "cluster", "coda", "codetools", "coin", "colorspace", "crayon", "curl", "data.table", "digest", "EMCluster", "git2r", "gtable", "Hmisc", "irlba", "lattice", "latticeExtra", "leaps", "maptools", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "mnormt", "munsell", "nlme", "NLP", "nnet", "OpenMx", "openNLP", "openssl", "party", "plotrix", "proto", "psych", "quantreg", "R.methodsS3", "R.oo", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "scales", "snow", "sp", "SparseM", "spatial", "spdep", "spgwr", "StanHeaders", "stringi", "syuzhet", "testthat", "tseries", "VGAM", "XML", "yaml", "zoo"))
install.packages(c("acepack", "astsa", "BH", "Cairo", "car", "choroplethr", "chron", "class", "cluster", "coda", "codetools", "coin", "colorspace", "crayon", "curl", "data.table", "digest", "EMCluster", "git2r", "gtable", "Hmisc", "irlba", "lattice", "latticeExtra", "leaps", "maptools", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "mnormt", "munsell", "nlme", "NLP", "nnet", "OpenMx", "openNLP", "openssl", "party", "plotrix", "proto", "psych", "quantreg", "R.methodsS3", "R.oo", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "scales", "snow", "sp", "SparseM", "spatial", "spdep", "spgwr", "StanHeaders", "stringi", "syuzhet", "testthat", "tseries", "VGAM", "XML", "yaml", "zoo"))
install.packages(c("acepack", "astsa", "BH", "Cairo", "car", "choroplethr", "chron", "class", "cluster", "coda", "codetools", "coin", "colorspace", "crayon", "curl", "data.table", "digest", "EMCluster", "git2r", "gtable", "Hmisc", "irlba", "lattice", "latticeExtra", "leaps", "maptools", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "mnormt", "munsell", "nlme", "NLP", "nnet", "OpenMx", "openNLP", "openssl", "party", "plotrix", "proto", "psych", "quantreg", "R.methodsS3", "R.oo", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "scales", "snow", "sp", "SparseM", "spatial", "spdep", "spgwr", "StanHeaders", "stringi", "syuzhet", "testthat", "tseries", "VGAM", "XML", "yaml", "zoo"))
install.packages(c("acepack", "astsa", "BH", "Cairo", "car", "choroplethr", "chron", "class", "cluster", "coda", "codetools", "coin", "colorspace", "crayon", "curl", "data.table", "digest", "EMCluster", "git2r", "gtable", "Hmisc", "irlba", "lattice", "latticeExtra", "leaps", "maptools", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "mnormt", "munsell", "nlme", "NLP", "nnet", "OpenMx", "openNLP", "openssl", "party", "plotrix", "proto", "psych", "quantreg", "R.methodsS3", "R.oo", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "scales", "snow", "sp", "SparseM", "spatial", "spdep", "spgwr", "StanHeaders", "stringi", "syuzhet", "testthat", "tseries", "VGAM", "XML", "yaml", "zoo"))
install.packages(c("acepack", "astsa", "BH", "Cairo", "car", "choroplethr", "chron", "class", "cluster", "coda", "codetools", "coin", "colorspace", "crayon", "curl", "data.table", "digest", "EMCluster", "git2r", "gtable", "Hmisc", "irlba", "lattice", "latticeExtra", "leaps", "maptools", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "mnormt", "munsell", "nlme", "NLP", "nnet", "OpenMx", "openNLP", "openssl", "party", "plotrix", "proto", "psych", "quantreg", "R.methodsS3", "R.oo", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "robustbase", "scales", "snow", "sp", "SparseM", "spatial", "spdep", "spgwr", "StanHeaders", "stringi", "syuzhet", "testthat", "tseries", "VGAM", "XML", "yaml", "zoo"))
wd <- "E:\\Kaggle\\Leaf-Classification\\raw"
setwd(wd)
train <- read.csv("train.csv",header = T,row.names = T)
train <- read.csv("train.csv",header = T)
train[10,10]
train[10,]
train <- read.csv("train.csv",header = T)[,-1]
X.train <- train[,-1]
Y.train <- train[,1]
X.train[3,1:10]
Y.train
library(rpart)
install.package("adabag")
install.packages("adabag")
library(adabag)
library(ggplot2)
data(iris)
iris.adaboost <- boosting(Species~., data=iris, boos=TRUE,
mfinal=6)
importanceplot(iris.adaboost)
library(adabag)
